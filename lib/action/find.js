"use strict";
import findOperation from "../operation/find";
import ruleOperation from "../operation/rule";
import rulePromptOperation from "../operation/prompt/rule";
import previousRuleOperation from "../operation/previousRule";
import previousRulePromptOperation from "../operation/prompt/previousRule";
import { S, EMPTY_STRING } from "../constants";
import { executeOperations } from "../utilities/operation";
export default function findAction(string, dryRun, format, quietly, previous, interactive) {
    var operations = [
        ruleOperation,
        previousRulePromptOperation,
        rulePromptOperation,
        previousRuleOperation,
        findOperation
    ], rule = null, lines = [], linesTotal = 0, filesTotal = 0, directoriesTotal = 0, occurrencesTotal = 0, context = {
        string: string,
        dryRun: dryRun,
        format: format,
        quietly: quietly,
        previous: previous,
        interactive: interactive,
        rule: rule,
        lines: lines,
        linesTotal: linesTotal,
        filesTotal: filesTotal,
        directoriesTotal: directoriesTotal,
        occurrencesTotal: occurrencesTotal
    };
    executeOperations(operations, function(completed) {
        if (format) {
            logLines(context);
        }
        if (!completed) {
            return;
        }
        logTotals(context);
    }, context);
}
function logLines(context) {
    var lines = context.lines;
    var maximumIndexLength = 0, maximumContentLength = 0;
    lines.forEach(function(line) {
        var indexLength = line.getIndexLength(), filePathLength = line.getFilePathLength();
        maximumIndexLength = Math.max(indexLength, maximumIndexLength);
        maximumContentLength = Math.max(filePathLength, maximumContentLength);
    });
    var requiredIndexLength = maximumIndexLength, requiredContentLength = maximumContentLength; ///
    lines.forEach(function(line) {
        var formattedMessage = line.asFormattedMessage(requiredIndexLength, requiredContentLength);
        console.log(formattedMessage);
    });
}
function logTotals(context) {
    var linesTotal = context.linesTotal, filesTotal = context.filesTotal, directoriesTotal = context.directoriesTotal, occurrencesTotal = context.occurrencesTotal, optionalS = occurrencesTotal === 1 ? EMPTY_STRING : S, message = "Found ".concat(occurrencesTotal, " occurrence").concat(optionalS, " across ").concat(directoriesTotal, " directories, ").concat(filesTotal, " files and ").concat(linesTotal, " lines.");
    console.log(message);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY3Rpb24vZmluZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IGZpbmRPcGVyYXRpb24gZnJvbSBcIi4uL29wZXJhdGlvbi9maW5kXCI7XG5pbXBvcnQgcnVsZU9wZXJhdGlvbiBmcm9tIFwiLi4vb3BlcmF0aW9uL3J1bGVcIjtcbmltcG9ydCBydWxlUHJvbXB0T3BlcmF0aW9uIGZyb20gXCIuLi9vcGVyYXRpb24vcHJvbXB0L3J1bGVcIjtcbmltcG9ydCBwcmV2aW91c1J1bGVPcGVyYXRpb24gZnJvbSBcIi4uL29wZXJhdGlvbi9wcmV2aW91c1J1bGVcIjtcbmltcG9ydCBwcmV2aW91c1J1bGVQcm9tcHRPcGVyYXRpb24gZnJvbSBcIi4uL29wZXJhdGlvbi9wcm9tcHQvcHJldmlvdXNSdWxlXCI7XG5cbmltcG9ydCB7IFMsIEVNUFRZX1NUUklORyB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcbmltcG9ydCB7IGV4ZWN1dGVPcGVyYXRpb25zIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9vcGVyYXRpb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluZEFjdGlvbihzdHJpbmcsIGRyeVJ1biwgZm9ybWF0LCBxdWlldGx5LCBwcmV2aW91cywgaW50ZXJhY3RpdmUpIHtcbiAgY29uc3Qgb3BlcmF0aW9ucyA9IFtcbiAgICAgICAgICBydWxlT3BlcmF0aW9uLFxuICAgICAgICAgIHByZXZpb3VzUnVsZVByb21wdE9wZXJhdGlvbixcbiAgICAgICAgICBydWxlUHJvbXB0T3BlcmF0aW9uLFxuICAgICAgICAgIHByZXZpb3VzUnVsZU9wZXJhdGlvbixcbiAgICAgICAgICBmaW5kT3BlcmF0aW9uXG4gICAgICAgIF0sXG4gICAgICAgIHJ1bGUgPSBudWxsLFxuICAgICAgICBsaW5lcyA9IFtdLFxuICAgICAgICBsaW5lc1RvdGFsID0gMCxcbiAgICAgICAgZmlsZXNUb3RhbCA9IDAsXG4gICAgICAgIGRpcmVjdG9yaWVzVG90YWwgPSAwLFxuICAgICAgICBvY2N1cnJlbmNlc1RvdGFsID0gMCxcbiAgICAgICAgY29udGV4dCA9IHtcbiAgICAgICAgICBzdHJpbmcsXG4gICAgICAgICAgZHJ5UnVuLFxuICAgICAgICAgIGZvcm1hdCxcbiAgICAgICAgICBxdWlldGx5LFxuICAgICAgICAgIHByZXZpb3VzLFxuICAgICAgICAgIGludGVyYWN0aXZlLFxuICAgICAgICAgIHJ1bGUsXG4gICAgICAgICAgbGluZXMsXG4gICAgICAgICAgbGluZXNUb3RhbCxcbiAgICAgICAgICBmaWxlc1RvdGFsLFxuICAgICAgICAgIGRpcmVjdG9yaWVzVG90YWwsXG4gICAgICAgICAgb2NjdXJyZW5jZXNUb3RhbFxuICAgICAgICB9O1xuXG4gIGV4ZWN1dGVPcGVyYXRpb25zKG9wZXJhdGlvbnMsIChjb21wbGV0ZWQpID0+IHtcbiAgICBpZiAoZm9ybWF0KSB7XG4gICAgICBsb2dMaW5lcyhjb250ZXh0KTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbXBsZXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxvZ1RvdGFscyhjb250ZXh0KTtcbiAgfSwgY29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIGxvZ0xpbmVzKGNvbnRleHQpIHtcbiAgY29uc3QgeyBsaW5lcyB9ID0gY29udGV4dDtcblxuICBsZXQgbWF4aW11bUluZGV4TGVuZ3RoID0gMCxcbiAgICAgIG1heGltdW1Db250ZW50TGVuZ3RoID0gMDtcblxuICBsaW5lcy5mb3JFYWNoKChsaW5lKSA9PiB7XG4gICAgY29uc3QgaW5kZXhMZW5ndGggPSBsaW5lLmdldEluZGV4TGVuZ3RoKCksXG4gICAgICAgICAgZmlsZVBhdGhMZW5ndGggPSBsaW5lLmdldEZpbGVQYXRoTGVuZ3RoKCk7XG5cbiAgICBtYXhpbXVtSW5kZXhMZW5ndGggPSBNYXRoLm1heChpbmRleExlbmd0aCwgbWF4aW11bUluZGV4TGVuZ3RoKTtcbiAgICBtYXhpbXVtQ29udGVudExlbmd0aCA9IE1hdGgubWF4KGZpbGVQYXRoTGVuZ3RoLCBtYXhpbXVtQ29udGVudExlbmd0aCk7XG4gIH0pO1xuXG4gIGNvbnN0IHJlcXVpcmVkSW5kZXhMZW5ndGggPSBtYXhpbXVtSW5kZXhMZW5ndGgsIC8vL1xuICAgICAgICByZXF1aXJlZENvbnRlbnRMZW5ndGggPSBtYXhpbXVtQ29udGVudExlbmd0aDsgLy8vXG5cbiAgbGluZXMuZm9yRWFjaCgobGluZSkgPT4ge1xuICAgIGNvbnN0IGZvcm1hdHRlZE1lc3NhZ2UgPSBsaW5lLmFzRm9ybWF0dGVkTWVzc2FnZShyZXF1aXJlZEluZGV4TGVuZ3RoLCByZXF1aXJlZENvbnRlbnRMZW5ndGgpO1xuXG4gICAgY29uc29sZS5sb2coZm9ybWF0dGVkTWVzc2FnZSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBsb2dUb3RhbHMoY29udGV4dCkge1xuICBjb25zdCB7IGxpbmVzVG90YWwsIGZpbGVzVG90YWwsIGRpcmVjdG9yaWVzVG90YWwsIG9jY3VycmVuY2VzVG90YWwgfSA9IGNvbnRleHQsXG4gICAgICAgIG9wdGlvbmFsUyA9IChvY2N1cnJlbmNlc1RvdGFsID09PSAxKSA/XG4gICAgICAgICAgICAgICAgICAgICAgRU1QVFlfU1RSSU5HIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIFMsXG4gICAgICAgIG1lc3NhZ2UgPSBgRm91bmQgJHtvY2N1cnJlbmNlc1RvdGFsfSBvY2N1cnJlbmNlJHtvcHRpb25hbFN9IGFjcm9zcyAke2RpcmVjdG9yaWVzVG90YWx9IGRpcmVjdG9yaWVzLCAke2ZpbGVzVG90YWx9IGZpbGVzIGFuZCAke2xpbmVzVG90YWx9IGxpbmVzLmA7XG5cbiAgY29uc29sZS5sb2cobWVzc2FnZSk7XG59XG4iXSwibmFtZXMiOlsiZmluZE9wZXJhdGlvbiIsInJ1bGVPcGVyYXRpb24iLCJydWxlUHJvbXB0T3BlcmF0aW9uIiwicHJldmlvdXNSdWxlT3BlcmF0aW9uIiwicHJldmlvdXNSdWxlUHJvbXB0T3BlcmF0aW9uIiwiUyIsIkVNUFRZX1NUUklORyIsImV4ZWN1dGVPcGVyYXRpb25zIiwiZmluZEFjdGlvbiIsInN0cmluZyIsImRyeVJ1biIsImZvcm1hdCIsInF1aWV0bHkiLCJwcmV2aW91cyIsImludGVyYWN0aXZlIiwib3BlcmF0aW9ucyIsInJ1bGUiLCJsaW5lcyIsImxpbmVzVG90YWwiLCJmaWxlc1RvdGFsIiwiZGlyZWN0b3JpZXNUb3RhbCIsIm9jY3VycmVuY2VzVG90YWwiLCJjb250ZXh0IiwiY29tcGxldGVkIiwibG9nTGluZXMiLCJsb2dUb3RhbHMiLCJtYXhpbXVtSW5kZXhMZW5ndGgiLCJtYXhpbXVtQ29udGVudExlbmd0aCIsImZvckVhY2giLCJsaW5lIiwiaW5kZXhMZW5ndGgiLCJnZXRJbmRleExlbmd0aCIsImZpbGVQYXRoTGVuZ3RoIiwiZ2V0RmlsZVBhdGhMZW5ndGgiLCJNYXRoIiwibWF4IiwicmVxdWlyZWRJbmRleExlbmd0aCIsInJlcXVpcmVkQ29udGVudExlbmd0aCIsImZvcm1hdHRlZE1lc3NhZ2UiLCJhc0Zvcm1hdHRlZE1lc3NhZ2UiLCJjb25zb2xlIiwibG9nIiwib3B0aW9uYWxTIiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxPQUFPQSxtQkFBbUIsb0JBQW9CO0FBQzlDLE9BQU9DLG1CQUFtQixvQkFBb0I7QUFDOUMsT0FBT0MseUJBQXlCLDJCQUEyQjtBQUMzRCxPQUFPQywyQkFBMkIsNEJBQTRCO0FBQzlELE9BQU9DLGlDQUFpQyxtQ0FBbUM7QUFFM0UsU0FBU0MsQ0FBQyxFQUFFQyxZQUFZLFFBQVEsZUFBZTtBQUMvQyxTQUFTQyxpQkFBaUIsUUFBUSx5QkFBeUI7QUFFM0QsZUFBZSxTQUFTQyxXQUFXQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsRUFBRUMsV0FBVztJQUN2RixJQUFNQyxhQUFhO1FBQ1hkO1FBQ0FHO1FBQ0FGO1FBQ0FDO1FBQ0FIO0tBQ0QsRUFDRGdCLE9BQU8sTUFDUEMsUUFBUSxFQUFFLEVBQ1ZDLGFBQWEsR0FDYkMsYUFBYSxHQUNiQyxtQkFBbUIsR0FDbkJDLG1CQUFtQixHQUNuQkMsVUFBVTtRQUNSYixRQUFBQTtRQUNBQyxRQUFBQTtRQUNBQyxRQUFBQTtRQUNBQyxTQUFBQTtRQUNBQyxVQUFBQTtRQUNBQyxhQUFBQTtRQUNBRSxNQUFBQTtRQUNBQyxPQUFBQTtRQUNBQyxZQUFBQTtRQUNBQyxZQUFBQTtRQUNBQyxrQkFBQUE7UUFDQUMsa0JBQUFBO0lBQ0Y7SUFFTmQsa0JBQWtCUSxZQUFZLFNBQUNRO1FBQzdCLElBQUlaLFFBQVE7WUFDVmEsU0FBU0Y7UUFDWDtRQUVBLElBQUksQ0FBQ0MsV0FBVztZQUNkO1FBQ0Y7UUFFQUUsVUFBVUg7SUFDWixHQUFHQTtBQUNMO0FBRUEsU0FBU0UsU0FBU0YsT0FBTztJQUN2QixJQUFNLEFBQUVMLFFBQVVLLFFBQVZMO0lBRVIsSUFBSVMscUJBQXFCLEdBQ3JCQyx1QkFBdUI7SUFFM0JWLE1BQU1XLE9BQU8sQ0FBQyxTQUFDQztRQUNiLElBQU1DLGNBQWNELEtBQUtFLGNBQWMsSUFDakNDLGlCQUFpQkgsS0FBS0ksaUJBQWlCO1FBRTdDUCxxQkFBcUJRLEtBQUtDLEdBQUcsQ0FBQ0wsYUFBYUo7UUFDM0NDLHVCQUF1Qk8sS0FBS0MsR0FBRyxDQUFDSCxnQkFBZ0JMO0lBQ2xEO0lBRUEsSUFBTVMsc0JBQXNCVixvQkFDdEJXLHdCQUF3QlYsc0JBQXNCLEdBQUc7SUFFdkRWLE1BQU1XLE9BQU8sQ0FBQyxTQUFDQztRQUNiLElBQU1TLG1CQUFtQlQsS0FBS1Usa0JBQWtCLENBQUNILHFCQUFxQkM7UUFFdEVHLFFBQVFDLEdBQUcsQ0FBQ0g7SUFDZDtBQUNGO0FBRUEsU0FBU2IsVUFBVUgsT0FBTztJQUN4QixJQUFRSixhQUErREksUUFBL0RKLFlBQVlDLGFBQW1ERyxRQUFuREgsWUFBWUMsbUJBQXVDRSxRQUF2Q0Ysa0JBQWtCQyxtQkFBcUJDLFFBQXJCRCxrQkFDNUNxQixZQUFZLEFBQUNyQixxQkFBcUIsSUFDcEJmLGVBQ0VELEdBQ2hCc0MsVUFBVSxBQUFDLFNBQXNDRCxPQUE5QnJCLGtCQUFpQixlQUFpQ0QsT0FBcEJzQixXQUFVLFlBQTJDdkIsT0FBakNDLGtCQUFpQixrQkFBd0NGLE9BQXhCQyxZQUFXLGVBQXdCLE9BQVhELFlBQVc7SUFFL0lzQixRQUFRQyxHQUFHLENBQUNFO0FBQ2QifQ==