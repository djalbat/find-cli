"use strict";
import pathRulePromptOperation from "../operation/prompt/pathRule";
import updatePathRulesOperation from "../operation/updatePatRules";
import ignoreOrPermitPathPromptOperation from "../operation/prompt/ignoreOrPermitPath";
import { executeOperations } from "../utilities/operation";
import { stripRootDirectoryFromPath } from "../utilities/path";
export function asynchronousIsFilePathIgnored(filePath, context, callback) {
    filePath = stripRootDirectoryFromPath(filePath, context); ///
    var path = filePath, directory = false;
    asynchronousIsPathIgnored(path, directory, context, callback);
}
export function asynchronousIsDirectoryPathIgnored(directoryPath, context, callback) {
    directoryPath = stripRootDirectoryFromPath(directoryPath, context); ///
    var path = directoryPath, directory = true;
    asynchronousIsPathIgnored(path, directory, context, callback);
}
function asynchronousIsPathIgnored(path, directory, context, callback) {
    var operations = [
        ignoreOrPermitPathPromptOperation,
        pathRulePromptOperation,
        updatePathRulesOperation
    ], pathRule = null, pathIgnored = null;
    Object.assign(context, {
        path: path,
        directory: directory,
        pathRule: pathRule,
        pathIgnored: pathIgnored
    });
    executeOperations(operations, function(completed) {
        var pathIgnored = context.pathIgnored;
        delete context.path;
        delete context.directory;
        delete context.pathRule;
        delete context.pathIgnored;
        callback(pathIgnored);
    }, context);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pc0lnbm9yZWQvYXN5bmNocm9ub3VzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgcGF0aFJ1bGVQcm9tcHRPcGVyYXRpb24gZnJvbSBcIi4uL29wZXJhdGlvbi9wcm9tcHQvcGF0aFJ1bGVcIjtcbmltcG9ydCB1cGRhdGVQYXRoUnVsZXNPcGVyYXRpb24gZnJvbSBcIi4uL29wZXJhdGlvbi91cGRhdGVQYXRSdWxlc1wiO1xuaW1wb3J0IGlnbm9yZU9yUGVybWl0UGF0aFByb21wdE9wZXJhdGlvbiBmcm9tIFwiLi4vb3BlcmF0aW9uL3Byb21wdC9pZ25vcmVPclBlcm1pdFBhdGhcIjtcblxuaW1wb3J0IHsgZXhlY3V0ZU9wZXJhdGlvbnMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL29wZXJhdGlvblwiO1xuaW1wb3J0IHsgc3RyaXBSb290RGlyZWN0b3J5RnJvbVBhdGggfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3BhdGhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGFzeW5jaHJvbm91c0lzRmlsZVBhdGhJZ25vcmVkKGZpbGVQYXRoLCBjb250ZXh0LCBjYWxsYmFjaykge1xuICBmaWxlUGF0aCA9IHN0cmlwUm9vdERpcmVjdG9yeUZyb21QYXRoKGZpbGVQYXRoLCBjb250ZXh0KTsgLy8vXG5cbiAgY29uc3QgcGF0aCA9IGZpbGVQYXRoLCAgLy8vXG4gICAgICAgIGRpcmVjdG9yeSA9IGZhbHNlO1xuXG4gIGFzeW5jaHJvbm91c0lzUGF0aElnbm9yZWQocGF0aCwgZGlyZWN0b3J5LCBjb250ZXh0LCBjYWxsYmFjayk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3luY2hyb25vdXNJc0RpcmVjdG9yeVBhdGhJZ25vcmVkKGRpcmVjdG9yeVBhdGgsIGNvbnRleHQsIGNhbGxiYWNrKSB7XG4gIGRpcmVjdG9yeVBhdGggPSBzdHJpcFJvb3REaXJlY3RvcnlGcm9tUGF0aChkaXJlY3RvcnlQYXRoLCBjb250ZXh0KTsgIC8vL1xuXG4gIGNvbnN0IHBhdGggPSBkaXJlY3RvcnlQYXRoLCAgLy8vXG4gICAgICAgIGRpcmVjdG9yeSA9IHRydWU7XG5cbiAgYXN5bmNocm9ub3VzSXNQYXRoSWdub3JlZChwYXRoLCBkaXJlY3RvcnksIGNvbnRleHQsIGNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gYXN5bmNocm9ub3VzSXNQYXRoSWdub3JlZChwYXRoLCBkaXJlY3RvcnksIGNvbnRleHQsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IG9wZXJhdGlvbnMgPSBbXG4gICAgICAgICAgaWdub3JlT3JQZXJtaXRQYXRoUHJvbXB0T3BlcmF0aW9uLFxuICAgICAgICAgIHBhdGhSdWxlUHJvbXB0T3BlcmF0aW9uLFxuICAgICAgICAgIHVwZGF0ZVBhdGhSdWxlc09wZXJhdGlvblxuICAgICAgICBdLFxuICAgICAgICBwYXRoUnVsZSA9IG51bGwsXG4gICAgICAgIHBhdGhJZ25vcmVkID0gbnVsbDtcblxuICBPYmplY3QuYXNzaWduKGNvbnRleHQsIHtcbiAgICBwYXRoLFxuICAgIGRpcmVjdG9yeSxcbiAgICBwYXRoUnVsZSxcbiAgICBwYXRoSWdub3JlZFxuICB9KTtcblxuICBleGVjdXRlT3BlcmF0aW9ucyhvcGVyYXRpb25zLCAoY29tcGxldGVkKSA9PiB7XG4gICAgY29uc3QgeyBwYXRoSWdub3JlZCB9ID0gY29udGV4dDtcblxuICAgIGRlbGV0ZSBjb250ZXh0LnBhdGg7XG4gICAgZGVsZXRlIGNvbnRleHQuZGlyZWN0b3J5O1xuICAgIGRlbGV0ZSBjb250ZXh0LnBhdGhSdWxlO1xuICAgIGRlbGV0ZSBjb250ZXh0LnBhdGhJZ25vcmVkO1xuXG4gICAgY2FsbGJhY2socGF0aElnbm9yZWQpO1xuICB9LCBjb250ZXh0KTtcbn1cbiJdLCJuYW1lcyI6WyJwYXRoUnVsZVByb21wdE9wZXJhdGlvbiIsInVwZGF0ZVBhdGhSdWxlc09wZXJhdGlvbiIsImlnbm9yZU9yUGVybWl0UGF0aFByb21wdE9wZXJhdGlvbiIsImV4ZWN1dGVPcGVyYXRpb25zIiwic3RyaXBSb290RGlyZWN0b3J5RnJvbVBhdGgiLCJhc3luY2hyb25vdXNJc0ZpbGVQYXRoSWdub3JlZCIsImZpbGVQYXRoIiwiY29udGV4dCIsImNhbGxiYWNrIiwicGF0aCIsImRpcmVjdG9yeSIsImFzeW5jaHJvbm91c0lzUGF0aElnbm9yZWQiLCJhc3luY2hyb25vdXNJc0RpcmVjdG9yeVBhdGhJZ25vcmVkIiwiZGlyZWN0b3J5UGF0aCIsIm9wZXJhdGlvbnMiLCJwYXRoUnVsZSIsInBhdGhJZ25vcmVkIiwiT2JqZWN0IiwiYXNzaWduIiwiY29tcGxldGVkIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE9BQU9BLDZCQUE2QiwrQkFBK0I7QUFDbkUsT0FBT0MsOEJBQThCLDhCQUE4QjtBQUNuRSxPQUFPQyx1Q0FBdUMseUNBQXlDO0FBRXZGLFNBQVNDLGlCQUFpQixRQUFRLHlCQUF5QjtBQUMzRCxTQUFTQywwQkFBMEIsUUFBUSxvQkFBb0I7QUFFL0QsT0FBTyxTQUFTQyw4QkFBOEJDLFFBQVEsRUFBRUMsT0FBTyxFQUFFQyxRQUFRO0lBQ3ZFRixXQUFXRiwyQkFBMkJFLFVBQVVDLFVBQVUsR0FBRztJQUU3RCxJQUFNRSxPQUFPSCxVQUNQSSxZQUFZO0lBRWxCQywwQkFBMEJGLE1BQU1DLFdBQVdILFNBQVNDO0FBQ3REO0FBRUEsT0FBTyxTQUFTSSxtQ0FBbUNDLGFBQWEsRUFBRU4sT0FBTyxFQUFFQyxRQUFRO0lBQ2pGSyxnQkFBZ0JULDJCQUEyQlMsZUFBZU4sVUFBVyxHQUFHO0lBRXhFLElBQU1FLE9BQU9JLGVBQ1BILFlBQVk7SUFFbEJDLDBCQUEwQkYsTUFBTUMsV0FBV0gsU0FBU0M7QUFDdEQ7QUFFQSxTQUFTRywwQkFBMEJGLElBQUksRUFBRUMsU0FBUyxFQUFFSCxPQUFPLEVBQUVDLFFBQVE7SUFDbkUsSUFBTU0sYUFBYTtRQUNYWjtRQUNBRjtRQUNBQztLQUNELEVBQ0RjLFdBQVcsTUFDWEMsY0FBYztJQUVwQkMsT0FBT0MsTUFBTSxDQUFDWCxTQUFTO1FBQ3JCRSxNQUFBQTtRQUNBQyxXQUFBQTtRQUNBSyxVQUFBQTtRQUNBQyxhQUFBQTtJQUNGO0lBRUFiLGtCQUFrQlcsWUFBWSxTQUFDSztRQUM3QixJQUFNLEFBQUVILGNBQWdCVCxRQUFoQlM7UUFFUixPQUFPVCxRQUFRRSxJQUFJO1FBQ25CLE9BQU9GLFFBQVFHLFNBQVM7UUFDeEIsT0FBT0gsUUFBUVEsUUFBUTtRQUN2QixPQUFPUixRQUFRUyxXQUFXO1FBRTFCUixTQUFTUTtJQUNYLEdBQUdUO0FBQ0wifQ==