"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return updatePathRulesOperation;
    }
});
var _configuration = require("../configuration");
function updatePathRulesOperation(proceed, abort, context) {
    var pathRule = context.pathRule, directory = context.directory, pathIgnored = context.pathIgnored;
    pathIgnored ? addIgnoreRule(pathRule, directory, context) : addPermitRule(pathRule, directory, context);
    proceed();
}
function addIgnoreRule(pathRule, directory, context) {
    if (directory) {
        var ignoredDirectoryPathRules = context.ignoredDirectoryPathRules, ignoredDirectoryPathRule = pathRule; ///
        ignoredDirectoryPathRules.push(ignoredDirectoryPathRule);
        (0, _configuration.updateIgnoredDirectoryPathRules)(ignoredDirectoryPathRules);
    } else {
        var ignoredFilePathRules = context.ignoredFilePathRules, ignoredFilePathRule = pathRule; ///
        ignoredFilePathRules.push(ignoredFilePathRule);
        (0, _configuration.updateIgnoredFilePathRules)(ignoredFilePathRules);
    }
}
function addPermitRule(pathRule, directory, context) {
    if (directory) {
        var permittedDirectoryPathRules = context.permittedDirectoryPathRules, permittedDirectoryPathRule = pathRule; ///
        permittedDirectoryPathRules.push(permittedDirectoryPathRule);
        (0, _configuration.updatePermittedDirectoryPathRules)(permittedDirectoryPathRules);
    } else {
        var permittedFilePathRules = context.permittedFilePathRules, permittedFilePathRule = pathRule; ///
        permittedFilePathRules.push(permittedFilePathRule);
        (0, _configuration.updatePermittedFilePathRules)(permittedFilePathRules);
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vcGVyYXRpb24vdXBkYXRlUGF0UnVsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IHVwZGF0ZUlnbm9yZWRGaWxlUGF0aFJ1bGVzLFxuICAgICAgICB1cGRhdGVQZXJtaXR0ZWRGaWxlUGF0aFJ1bGVzLFxuICAgICAgICB1cGRhdGVJZ25vcmVkRGlyZWN0b3J5UGF0aFJ1bGVzLFxuICAgICAgICB1cGRhdGVQZXJtaXR0ZWREaXJlY3RvcnlQYXRoUnVsZXMgfSBmcm9tIFwiLi4vY29uZmlndXJhdGlvblwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVQYXRoUnVsZXNPcGVyYXRpb24ocHJvY2VlZCwgYWJvcnQsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBwYXRoUnVsZSwgZGlyZWN0b3J5LCBwYXRoSWdub3JlZCB9ID0gY29udGV4dDtcblxuICBwYXRoSWdub3JlZCA/XG4gICAgYWRkSWdub3JlUnVsZShwYXRoUnVsZSwgZGlyZWN0b3J5LCBjb250ZXh0KSA6XG4gICAgICBhZGRQZXJtaXRSdWxlKHBhdGhSdWxlLCBkaXJlY3RvcnksIGNvbnRleHQpO1xuXG4gIHByb2NlZWQoKTtcbn1cblxuZnVuY3Rpb24gYWRkSWdub3JlUnVsZShwYXRoUnVsZSwgZGlyZWN0b3J5LCBjb250ZXh0KSB7XG4gIGlmIChkaXJlY3RvcnkpIHtcbiAgICBjb25zdCB7IGlnbm9yZWREaXJlY3RvcnlQYXRoUnVsZXMgfSA9IGNvbnRleHQsXG4gICAgICAgICAgaWdub3JlZERpcmVjdG9yeVBhdGhSdWxlID0gcGF0aFJ1bGU7ICAvLy9cblxuICAgIGlnbm9yZWREaXJlY3RvcnlQYXRoUnVsZXMucHVzaChpZ25vcmVkRGlyZWN0b3J5UGF0aFJ1bGUpO1xuXG4gICAgdXBkYXRlSWdub3JlZERpcmVjdG9yeVBhdGhSdWxlcyhpZ25vcmVkRGlyZWN0b3J5UGF0aFJ1bGVzKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB7IGlnbm9yZWRGaWxlUGF0aFJ1bGVzIH0gPSBjb250ZXh0LFxuICAgICAgICAgIGlnbm9yZWRGaWxlUGF0aFJ1bGUgPSBwYXRoUnVsZTsgIC8vL1xuXG4gICAgaWdub3JlZEZpbGVQYXRoUnVsZXMucHVzaChpZ25vcmVkRmlsZVBhdGhSdWxlKTtcblxuICAgIHVwZGF0ZUlnbm9yZWRGaWxlUGF0aFJ1bGVzKGlnbm9yZWRGaWxlUGF0aFJ1bGVzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRQZXJtaXRSdWxlKHBhdGhSdWxlLCBkaXJlY3RvcnksIGNvbnRleHQpIHtcbiAgaWYgKGRpcmVjdG9yeSkge1xuICAgIGNvbnN0IHsgcGVybWl0dGVkRGlyZWN0b3J5UGF0aFJ1bGVzIH0gPSBjb250ZXh0LFxuICAgICAgICAgIHBlcm1pdHRlZERpcmVjdG9yeVBhdGhSdWxlID0gcGF0aFJ1bGU7ICAvLy9cblxuICAgIHBlcm1pdHRlZERpcmVjdG9yeVBhdGhSdWxlcy5wdXNoKHBlcm1pdHRlZERpcmVjdG9yeVBhdGhSdWxlKTtcblxuICAgIHVwZGF0ZVBlcm1pdHRlZERpcmVjdG9yeVBhdGhSdWxlcyhwZXJtaXR0ZWREaXJlY3RvcnlQYXRoUnVsZXMpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHsgcGVybWl0dGVkRmlsZVBhdGhSdWxlcyB9ID0gY29udGV4dCxcbiAgICAgICAgICBwZXJtaXR0ZWRGaWxlUGF0aFJ1bGUgPSBwYXRoUnVsZTsgIC8vL1xuXG4gICAgcGVybWl0dGVkRmlsZVBhdGhSdWxlcy5wdXNoKHBlcm1pdHRlZEZpbGVQYXRoUnVsZSk7XG5cbiAgICB1cGRhdGVQZXJtaXR0ZWRGaWxlUGF0aFJ1bGVzKHBlcm1pdHRlZEZpbGVQYXRoUnVsZXMpO1xuICB9XG59XG4iXSwibmFtZXMiOlsidXBkYXRlUGF0aFJ1bGVzT3BlcmF0aW9uIiwicHJvY2VlZCIsImFib3J0IiwiY29udGV4dCIsInBhdGhSdWxlIiwiZGlyZWN0b3J5IiwicGF0aElnbm9yZWQiLCJhZGRJZ25vcmVSdWxlIiwiYWRkUGVybWl0UnVsZSIsImlnbm9yZWREaXJlY3RvcnlQYXRoUnVsZXMiLCJpZ25vcmVkRGlyZWN0b3J5UGF0aFJ1bGUiLCJwdXNoIiwidXBkYXRlSWdub3JlZERpcmVjdG9yeVBhdGhSdWxlcyIsImlnbm9yZWRGaWxlUGF0aFJ1bGVzIiwiaWdub3JlZEZpbGVQYXRoUnVsZSIsInVwZGF0ZUlnbm9yZWRGaWxlUGF0aFJ1bGVzIiwicGVybWl0dGVkRGlyZWN0b3J5UGF0aFJ1bGVzIiwicGVybWl0dGVkRGlyZWN0b3J5UGF0aFJ1bGUiLCJ1cGRhdGVQZXJtaXR0ZWREaXJlY3RvcnlQYXRoUnVsZXMiLCJwZXJtaXR0ZWRGaWxlUGF0aFJ1bGVzIiwicGVybWl0dGVkRmlsZVBhdGhSdWxlIiwidXBkYXRlUGVybWl0dGVkRmlsZVBhdGhSdWxlcyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7K0JBT0E7OztlQUF3QkE7Ozs2QkFGeUI7QUFFbEMsU0FBU0EseUJBQXlCQyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsT0FBTztJQUN0RSxJQUFRQyxXQUFxQ0QsUUFBckNDLFVBQVVDLFlBQTJCRixRQUEzQkUsV0FBV0MsY0FBZ0JILFFBQWhCRztJQUU3QkEsY0FDRUMsY0FBY0gsVUFBVUMsV0FBV0YsV0FDakNLLGNBQWNKLFVBQVVDLFdBQVdGO0lBRXZDRjtBQUNGO0FBRUEsU0FBU00sY0FBY0gsUUFBUSxFQUFFQyxTQUFTLEVBQUVGLE9BQU87SUFDakQsSUFBSUUsV0FBVztRQUNiLElBQU0sQUFBRUksNEJBQThCTixRQUE5Qk0sMkJBQ0ZDLDJCQUEyQk4sVUFBVyxHQUFHO1FBRS9DSywwQkFBMEJFLElBQUksQ0FBQ0Q7UUFFL0JFLElBQUFBLDhDQUErQixFQUFDSDtJQUNsQyxPQUFPO1FBQ0wsSUFBTSxBQUFFSSx1QkFBeUJWLFFBQXpCVSxzQkFDRkMsc0JBQXNCVixVQUFXLEdBQUc7UUFFMUNTLHFCQUFxQkYsSUFBSSxDQUFDRztRQUUxQkMsSUFBQUEseUNBQTBCLEVBQUNGO0lBQzdCO0FBQ0Y7QUFFQSxTQUFTTCxjQUFjSixRQUFRLEVBQUVDLFNBQVMsRUFBRUYsT0FBTztJQUNqRCxJQUFJRSxXQUFXO1FBQ2IsSUFBTSxBQUFFVyw4QkFBZ0NiLFFBQWhDYSw2QkFDRkMsNkJBQTZCYixVQUFXLEdBQUc7UUFFakRZLDRCQUE0QkwsSUFBSSxDQUFDTTtRQUVqQ0MsSUFBQUEsZ0RBQWlDLEVBQUNGO0lBQ3BDLE9BQU87UUFDTCxJQUFNLEFBQUVHLHlCQUEyQmhCLFFBQTNCZ0Isd0JBQ0ZDLHdCQUF3QmhCLFVBQVcsR0FBRztRQUU1Q2UsdUJBQXVCUixJQUFJLENBQUNTO1FBRTVCQyxJQUFBQSwyQ0FBNEIsRUFBQ0Y7SUFDL0I7QUFDRiJ9