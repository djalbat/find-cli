"use strict";
import { pathUtilities } from "necessary";
import { CURRENT_DIRECTORY_PATH } from "../constants";
var concatenatePaths = pathUtilities.concatenatePaths;
export function stripRootDirectoryFromPath(path, context) {
    var rootDirectoryPaths = context.rootDirectoryPaths;
    rootDirectoryPaths.some(function(rootDirectoryPath) {
        var pathStartsWithRootDirectoryPath = path.startsWith(rootDirectoryPath);
        if (pathStartsWithRootDirectoryPath) {
            var length = rootDirectoryPath.length, start = length;
            path = path.substring(start); ///
            return true;
        }
    });
    return path;
}
export function isDirectoryPathRootDirectoryPath(directoryPath, context) {
    var rootDirectoryPaths = context.rootDirectoryPaths, rootDirectoryPathsIncludesDirectoryPath = rootDirectoryPaths.includes(directoryPath), directoryPathRootDirectoryPath = rootDirectoryPathsIncludesDirectoryPath; ///
    return directoryPathRootDirectoryPath;
}
export function entryPathsFromEntryNamesAndDirectoryPath(entryNames, directoryPath) {
    var entryPaths = entryNames.map(function(entryName) {
        var entryPath = entryPathFromEntryNameAndDirectoryPath(entryName, directoryPath);
        return entryPath;
    });
    return entryPaths;
}
function entryPathFromEntryNameAndDirectoryPath(entryName, directoryPath) {
    var entryPath = directoryPath === CURRENT_DIRECTORY_PATH ? entryName : concatenatePaths(directoryPath, entryName);
    return entryPath;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGF0aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgcGF0aFV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuaW1wb3J0IHsgQ1VSUkVOVF9ESVJFQ1RPUllfUEFUSCB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcblxuY29uc3QgeyBjb25jYXRlbmF0ZVBhdGhzIH0gPSBwYXRoVXRpbGl0aWVzO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyaXBSb290RGlyZWN0b3J5RnJvbVBhdGgocGF0aCwgY29udGV4dCkge1xuICBjb25zdCB7IHJvb3REaXJlY3RvcnlQYXRocyB9ID0gY29udGV4dDtcblxuICByb290RGlyZWN0b3J5UGF0aHMuc29tZSgocm9vdERpcmVjdG9yeVBhdGgpID0+IHtcbiAgICBjb25zdCBwYXRoU3RhcnRzV2l0aFJvb3REaXJlY3RvcnlQYXRoID0gcGF0aC5zdGFydHNXaXRoKHJvb3REaXJlY3RvcnlQYXRoKTtcblxuICAgIGlmIChwYXRoU3RhcnRzV2l0aFJvb3REaXJlY3RvcnlQYXRoKSB7XG4gICAgICBjb25zdCBsZW5ndGggPSByb290RGlyZWN0b3J5UGF0aC5sZW5ndGgsXG4gICAgICAgICAgICBzdGFydCA9IGxlbmd0aDtcblxuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyaW5nKHN0YXJ0KTsgIC8vL1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXRoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEaXJlY3RvcnlQYXRoUm9vdERpcmVjdG9yeVBhdGgoZGlyZWN0b3J5UGF0aCwgY29udGV4dCkge1xuICBjb25zdCB7IHJvb3REaXJlY3RvcnlQYXRocyB9ID0gY29udGV4dCxcbiAgICAgICAgcm9vdERpcmVjdG9yeVBhdGhzSW5jbHVkZXNEaXJlY3RvcnlQYXRoID0gcm9vdERpcmVjdG9yeVBhdGhzLmluY2x1ZGVzKGRpcmVjdG9yeVBhdGgpLFxuICAgICAgICBkaXJlY3RvcnlQYXRoUm9vdERpcmVjdG9yeVBhdGggPSByb290RGlyZWN0b3J5UGF0aHNJbmNsdWRlc0RpcmVjdG9yeVBhdGg7IC8vL1xuXG4gIHJldHVybiBkaXJlY3RvcnlQYXRoUm9vdERpcmVjdG9yeVBhdGg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnRyeVBhdGhzRnJvbUVudHJ5TmFtZXNBbmREaXJlY3RvcnlQYXRoKGVudHJ5TmFtZXMsIGRpcmVjdG9yeVBhdGgpIHtcbiAgY29uc3QgZW50cnlQYXRocyA9IGVudHJ5TmFtZXMubWFwKChlbnRyeU5hbWUpID0+IHtcbiAgICBjb25zdCBlbnRyeVBhdGggPSBlbnRyeVBhdGhGcm9tRW50cnlOYW1lQW5kRGlyZWN0b3J5UGF0aChlbnRyeU5hbWUsIGRpcmVjdG9yeVBhdGgpO1xuXG4gICAgcmV0dXJuIGVudHJ5UGF0aFxuICB9KTtcblxuICByZXR1cm4gZW50cnlQYXRocztcbn1cblxuZnVuY3Rpb24gZW50cnlQYXRoRnJvbUVudHJ5TmFtZUFuZERpcmVjdG9yeVBhdGgoZW50cnlOYW1lLCBkaXJlY3RvcnlQYXRoKSB7XG4gIGNvbnN0IGVudHJ5UGF0aCA9IChkaXJlY3RvcnlQYXRoID09PSBDVVJSRU5UX0RJUkVDVE9SWV9QQVRIKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgZW50cnlOYW1lIDogLy8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjb25jYXRlbmF0ZVBhdGhzKGRpcmVjdG9yeVBhdGgsIGVudHJ5TmFtZSk7XG5cbiAgcmV0dXJuIGVudHJ5UGF0aDtcbn1cbiJdLCJuYW1lcyI6WyJwYXRoVXRpbGl0aWVzIiwiQ1VSUkVOVF9ESVJFQ1RPUllfUEFUSCIsImNvbmNhdGVuYXRlUGF0aHMiLCJzdHJpcFJvb3REaXJlY3RvcnlGcm9tUGF0aCIsInBhdGgiLCJjb250ZXh0Iiwicm9vdERpcmVjdG9yeVBhdGhzIiwic29tZSIsInJvb3REaXJlY3RvcnlQYXRoIiwicGF0aFN0YXJ0c1dpdGhSb290RGlyZWN0b3J5UGF0aCIsInN0YXJ0c1dpdGgiLCJsZW5ndGgiLCJzdGFydCIsInN1YnN0cmluZyIsImlzRGlyZWN0b3J5UGF0aFJvb3REaXJlY3RvcnlQYXRoIiwiZGlyZWN0b3J5UGF0aCIsInJvb3REaXJlY3RvcnlQYXRoc0luY2x1ZGVzRGlyZWN0b3J5UGF0aCIsImluY2x1ZGVzIiwiZGlyZWN0b3J5UGF0aFJvb3REaXJlY3RvcnlQYXRoIiwiZW50cnlQYXRoc0Zyb21FbnRyeU5hbWVzQW5kRGlyZWN0b3J5UGF0aCIsImVudHJ5TmFtZXMiLCJlbnRyeVBhdGhzIiwibWFwIiwiZW50cnlOYW1lIiwiZW50cnlQYXRoIiwiZW50cnlQYXRoRnJvbUVudHJ5TmFtZUFuZERpcmVjdG9yeVBhdGgiXSwibWFwcGluZ3MiOiJBQUFBO0FBRUEsU0FBU0EsYUFBYSxRQUFRLFlBQVk7QUFFMUMsU0FBU0Msc0JBQXNCLFFBQVEsZUFBZTtBQUV0RCxJQUFNLEFBQUVDLG1CQUFxQkYsY0FBckJFO0FBRVIsT0FBTyxTQUFTQywyQkFBMkJDLElBQUksRUFBRUMsT0FBTztJQUN0RCxJQUFNLEFBQUVDLHFCQUF1QkQsUUFBdkJDO0lBRVJBLG1CQUFtQkMsSUFBSSxDQUFDLFNBQUNDO1FBQ3ZCLElBQU1DLGtDQUFrQ0wsS0FBS00sVUFBVSxDQUFDRjtRQUV4RCxJQUFJQyxpQ0FBaUM7WUFDbkMsSUFBTUUsU0FBU0gsa0JBQWtCRyxNQUFNLEVBQ2pDQyxRQUFRRDtZQUVkUCxPQUFPQSxLQUFLUyxTQUFTLENBQUNELFFBQVMsR0FBRztZQUVsQyxPQUFPO1FBQ1Q7SUFDRjtJQUVBLE9BQU9SO0FBQ1Q7QUFFQSxPQUFPLFNBQVNVLGlDQUFpQ0MsYUFBYSxFQUFFVixPQUFPO0lBQ3JFLElBQU0sQUFBRUMscUJBQXVCRCxRQUF2QkMsb0JBQ0ZVLDBDQUEwQ1YsbUJBQW1CVyxRQUFRLENBQUNGLGdCQUN0RUcsaUNBQWlDRix5Q0FBeUMsR0FBRztJQUVuRixPQUFPRTtBQUNUO0FBRUEsT0FBTyxTQUFTQyx5Q0FBeUNDLFVBQVUsRUFBRUwsYUFBYTtJQUNoRixJQUFNTSxhQUFhRCxXQUFXRSxHQUFHLENBQUMsU0FBQ0M7UUFDakMsSUFBTUMsWUFBWUMsdUNBQXVDRixXQUFXUjtRQUVwRSxPQUFPUztJQUNUO0lBRUEsT0FBT0g7QUFDVDtBQUVBLFNBQVNJLHVDQUF1Q0YsU0FBUyxFQUFFUixhQUFhO0lBQ3RFLElBQU1TLFlBQVksQUFBQ1Qsa0JBQWtCZCx5QkFDZHNCLFlBQ0VyQixpQkFBaUJhLGVBQWVRO0lBRXpELE9BQU9DO0FBQ1QifQ==