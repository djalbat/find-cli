"use strict";
import { encodings, characters } from "necessary";
import { DATA } from "../constants";
import { PREVIOUS_GLOB_STRING_OR_REGEX_DESCRIPTION } from "../descriptions";
var UTF8_ENCODING = encodings.UTF8_ENCODING, UP_CHARACTER = characters.UP_CHARACTER, ETX_CHARACTER = characters.ETX_CHARACTER, DOWN_CHARACTER = characters.DOWN_CHARACTER, ESCAPE_CHARACTER = characters.ESCAPE_CHARACTER, CTRL_C_CHARACTER = characters.CTRL_C_CHARACTER, NEW_LINE_CHARACTER = characters.NEW_LINE_CHARACTER, CARRIAGE_RETURN_CHARACTER = characters.CARRIAGE_RETURN_CHARACTER;
export function isAnswerIgnore(answer) {
    return /^(:?ignore|i)$/i.test(answer);
}
export function selectPreviousRule(previousRules, callback) {
    var index = 0, previousRule = previousRules[index];
    writePreviousRule(previousRule);
    var rawMode = true, encoding = UTF8_ENCODING, previousRulesLength = previousRules.length;
    process.stdin.setRawMode(rawMode);
    process.stdin.setEncoding(encoding);
    process.stdin.addListener(DATA, listener);
    process.stdin.resume();
    function listener(data) {
        var character = data.toString(encoding);
        switch(character){
            case UP_CHARACTER:
                {
                    var firstIndex = 0;
                    if (index > firstIndex) {
                        index--;
                        previousRule = previousRules[index];
                        writePreviousRule(previousRule);
                    }
                    break;
                }
            case DOWN_CHARACTER:
                {
                    var lastIndex = previousRulesLength - 1;
                    if (index < lastIndex) {
                        index++;
                        previousRule = previousRules[index];
                        writePreviousRule(previousRule);
                    }
                    break;
                }
            case ESCAPE_CHARACTER:
                {
                    previousRule = null;
                    console.log(CARRIAGE_RETURN_CHARACTER);
                    process.stdin.removeListener(DATA, listener);
                    process.stdin.pause();
                    callback(previousRule);
                    break;
                }
            case NEW_LINE_CHARACTER:
            case CARRIAGE_RETURN_CHARACTER:
                {
                    process.stdout.clearLine();
                    process.stdout.cursorTo(0);
                    process.stdin.removeListener(DATA, listener);
                    process.stdin.pause();
                    callback(previousRule);
                    break;
                }
            case ETX_CHARACTER:
                {
                    console.log(CTRL_C_CHARACTER);
                    process.exit();
                    break;
                }
            default:
                {
                    break;
                }
        }
    }
}
function writePreviousRule(previousRule) {
    var description = PREVIOUS_GLOB_STRING_OR_REGEX_DESCRIPTION, previousRuleString = previousRule.asString();
    process.stdout.clearLine();
    process.stdout.cursorTo(0);
    process.stdout.write(description);
    process.stdout.write(previousRuleString);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcHJvbXB0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBlbmNvZGluZ3MsIGNoYXJhY3RlcnMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmltcG9ydCB7IERBVEEgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBQUkVWSU9VU19HTE9CX1NUUklOR19PUl9SRUdFWF9ERVNDUklQVElPTiB9IGZyb20gXCIuLi9kZXNjcmlwdGlvbnNcIjtcblxuY29uc3QgeyBVVEY4X0VOQ09ESU5HIH0gPSBlbmNvZGluZ3MsXG4gICAgICB7IFVQX0NIQVJBQ1RFUixcbiAgICAgICAgRVRYX0NIQVJBQ1RFUixcbiAgICAgICAgRE9XTl9DSEFSQUNURVIsXG4gICAgICAgIEVTQ0FQRV9DSEFSQUNURVIsXG4gICAgICAgIENUUkxfQ19DSEFSQUNURVIsXG4gICAgICAgIE5FV19MSU5FX0NIQVJBQ1RFUixcbiAgICAgICAgQ0FSUklBR0VfUkVUVVJOX0NIQVJBQ1RFUiB9ID0gY2hhcmFjdGVycztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzQW5zd2VySWdub3JlKGFuc3dlcikgeyByZXR1cm4gL14oOj9pZ25vcmV8aSkkL2kudGVzdChhbnN3ZXIpOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RQcmV2aW91c1J1bGUocHJldmlvdXNSdWxlcywgY2FsbGJhY2spIHtcbiAgbGV0IGluZGV4ID0gMCxcbiAgICAgIHByZXZpb3VzUnVsZSA9IHByZXZpb3VzUnVsZXNbaW5kZXhdO1xuXG4gIHdyaXRlUHJldmlvdXNSdWxlKHByZXZpb3VzUnVsZSk7XG5cbiAgY29uc3QgcmF3TW9kZSA9IHRydWUsXG4gICAgICAgIGVuY29kaW5nID0gVVRGOF9FTkNPRElORyxcbiAgICAgICAgcHJldmlvdXNSdWxlc0xlbmd0aCA9IHByZXZpb3VzUnVsZXMubGVuZ3RoO1xuXG4gIHByb2Nlc3Muc3RkaW4uc2V0UmF3TW9kZShyYXdNb2RlKTtcblxuICBwcm9jZXNzLnN0ZGluLnNldEVuY29kaW5nKGVuY29kaW5nKTtcblxuICBwcm9jZXNzLnN0ZGluLmFkZExpc3RlbmVyKERBVEEsIGxpc3RlbmVyKTtcblxuICBwcm9jZXNzLnN0ZGluLnJlc3VtZSgpO1xuXG4gIGZ1bmN0aW9uIGxpc3RlbmVyKGRhdGEpIHtcbiAgICBjb25zdCBjaGFyYWN0ZXIgPSBkYXRhLnRvU3RyaW5nKGVuY29kaW5nKTtcblxuICAgIHN3aXRjaCAoY2hhcmFjdGVyKSB7XG4gICAgICBjYXNlIFVQX0NIQVJBQ1RFUjoge1xuICAgICAgICBjb25zdCBmaXJzdEluZGV4ID0gMDtcblxuICAgICAgICBpZiAoaW5kZXggPiBmaXJzdEluZGV4KSB7XG4gICAgICAgICAgaW5kZXgtLTtcblxuICAgICAgICAgIHByZXZpb3VzUnVsZSA9IHByZXZpb3VzUnVsZXNbaW5kZXhdO1xuXG4gICAgICAgICAgd3JpdGVQcmV2aW91c1J1bGUocHJldmlvdXNSdWxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjYXNlIERPV05fQ0hBUkFDVEVSOiB7XG4gICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IHByZXZpb3VzUnVsZXNMZW5ndGggLSAxO1xuXG4gICAgICAgIGlmIChpbmRleCA8IGxhc3RJbmRleCkge1xuICAgICAgICAgIGluZGV4Kys7XG5cbiAgICAgICAgICBwcmV2aW91c1J1bGUgPSBwcmV2aW91c1J1bGVzW2luZGV4XTtcblxuICAgICAgICAgIHdyaXRlUHJldmlvdXNSdWxlKHByZXZpb3VzUnVsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgY2FzZSBFU0NBUEVfQ0hBUkFDVEVSOiB7XG4gICAgICAgIHByZXZpb3VzUnVsZSA9IG51bGw7XG5cbiAgICAgICAgY29uc29sZS5sb2coQ0FSUklBR0VfUkVUVVJOX0NIQVJBQ1RFUik7XG5cbiAgICAgICAgcHJvY2Vzcy5zdGRpbi5yZW1vdmVMaXN0ZW5lcihEQVRBLCBsaXN0ZW5lcik7XG5cbiAgICAgICAgcHJvY2Vzcy5zdGRpbi5wYXVzZSgpO1xuXG4gICAgICAgIGNhbGxiYWNrKHByZXZpb3VzUnVsZSk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNhc2UgTkVXX0xJTkVfQ0hBUkFDVEVSOlxuICAgICAgY2FzZSBDQVJSSUFHRV9SRVRVUk5fQ0hBUkFDVEVSOiB7XG4gICAgICAgIHByb2Nlc3Muc3Rkb3V0LmNsZWFyTGluZSgpO1xuXG4gICAgICAgIHByb2Nlc3Muc3Rkb3V0LmN1cnNvclRvKDApO1xuXG4gICAgICAgIHByb2Nlc3Muc3RkaW4ucmVtb3ZlTGlzdGVuZXIoREFUQSwgbGlzdGVuZXIpO1xuXG4gICAgICAgIHByb2Nlc3Muc3RkaW4ucGF1c2UoKTtcblxuICAgICAgICBjYWxsYmFjayhwcmV2aW91c1J1bGUpO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjYXNlIEVUWF9DSEFSQUNURVI6IHtcbiAgICAgICAgY29uc29sZS5sb2coQ1RSTF9DX0NIQVJBQ1RFUik7XG5cbiAgICAgICAgcHJvY2Vzcy5leGl0KCk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgLy8vXG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHdyaXRlUHJldmlvdXNSdWxlKHByZXZpb3VzUnVsZSkge1xuICBjb25zdCBkZXNjcmlwdGlvbiA9IFBSRVZJT1VTX0dMT0JfU1RSSU5HX09SX1JFR0VYX0RFU0NSSVBUSU9OLCAgLy8vXG4gICAgICAgIHByZXZpb3VzUnVsZVN0cmluZyA9IHByZXZpb3VzUnVsZS5hc1N0cmluZygpO1xuXG4gIHByb2Nlc3Muc3Rkb3V0LmNsZWFyTGluZSgpO1xuXG4gIHByb2Nlc3Muc3Rkb3V0LmN1cnNvclRvKDApO1xuXG4gIHByb2Nlc3Muc3Rkb3V0LndyaXRlKGRlc2NyaXB0aW9uKTtcblxuICBwcm9jZXNzLnN0ZG91dC53cml0ZShwcmV2aW91c1J1bGVTdHJpbmcpO1xufVxuXG4iXSwibmFtZXMiOlsiZW5jb2RpbmdzIiwiY2hhcmFjdGVycyIsIkRBVEEiLCJQUkVWSU9VU19HTE9CX1NUUklOR19PUl9SRUdFWF9ERVNDUklQVElPTiIsIlVURjhfRU5DT0RJTkciLCJVUF9DSEFSQUNURVIiLCJFVFhfQ0hBUkFDVEVSIiwiRE9XTl9DSEFSQUNURVIiLCJFU0NBUEVfQ0hBUkFDVEVSIiwiQ1RSTF9DX0NIQVJBQ1RFUiIsIk5FV19MSU5FX0NIQVJBQ1RFUiIsIkNBUlJJQUdFX1JFVFVSTl9DSEFSQUNURVIiLCJpc0Fuc3dlcklnbm9yZSIsImFuc3dlciIsInRlc3QiLCJzZWxlY3RQcmV2aW91c1J1bGUiLCJwcmV2aW91c1J1bGVzIiwiY2FsbGJhY2siLCJpbmRleCIsInByZXZpb3VzUnVsZSIsIndyaXRlUHJldmlvdXNSdWxlIiwicmF3TW9kZSIsImVuY29kaW5nIiwicHJldmlvdXNSdWxlc0xlbmd0aCIsImxlbmd0aCIsInByb2Nlc3MiLCJzdGRpbiIsInNldFJhd01vZGUiLCJzZXRFbmNvZGluZyIsImFkZExpc3RlbmVyIiwibGlzdGVuZXIiLCJyZXN1bWUiLCJkYXRhIiwiY2hhcmFjdGVyIiwidG9TdHJpbmciLCJmaXJzdEluZGV4IiwibGFzdEluZGV4IiwiY29uc29sZSIsImxvZyIsInJlbW92ZUxpc3RlbmVyIiwicGF1c2UiLCJzdGRvdXQiLCJjbGVhckxpbmUiLCJjdXJzb3JUbyIsImV4aXQiLCJkZXNjcmlwdGlvbiIsInByZXZpb3VzUnVsZVN0cmluZyIsImFzU3RyaW5nIiwid3JpdGUiXSwibWFwcGluZ3MiOiJBQUFBO0FBRUEsU0FBU0EsU0FBUyxFQUFFQyxVQUFVLFFBQVEsWUFBWTtBQUVsRCxTQUFTQyxJQUFJLFFBQVEsZUFBZTtBQUNwQyxTQUFTQyx5Q0FBeUMsUUFBUSxrQkFBa0I7QUFFNUUsSUFBTSxBQUFFQyxnQkFBa0JKLFVBQWxCSSxlQUNBQyxlQU04QkosV0FOOUJJLGNBQ0FDLGdCQUs4QkwsV0FMOUJLLGVBQ0FDLGlCQUk4Qk4sV0FKOUJNLGdCQUNBQyxtQkFHOEJQLFdBSDlCTyxrQkFDQUMsbUJBRThCUixXQUY5QlEsa0JBQ0FDLHFCQUM4QlQsV0FEOUJTLG9CQUNBQyw0QkFBOEJWLFdBQTlCVTtBQUVSLE9BQU8sU0FBU0MsZUFBZUMsTUFBTTtJQUFJLE9BQU8sa0JBQWtCQyxJQUFJLENBQUNEO0FBQVM7QUFFaEYsT0FBTyxTQUFTRSxtQkFBbUJDLGFBQWEsRUFBRUMsUUFBUTtJQUN4RCxJQUFJQyxRQUFRLEdBQ1JDLGVBQWVILGFBQWEsQ0FBQ0UsTUFBTTtJQUV2Q0Usa0JBQWtCRDtJQUVsQixJQUFNRSxVQUFVLE1BQ1ZDLFdBQVdsQixlQUNYbUIsc0JBQXNCUCxjQUFjUSxNQUFNO0lBRWhEQyxRQUFRQyxLQUFLLENBQUNDLFVBQVUsQ0FBQ047SUFFekJJLFFBQVFDLEtBQUssQ0FBQ0UsV0FBVyxDQUFDTjtJQUUxQkcsUUFBUUMsS0FBSyxDQUFDRyxXQUFXLENBQUMzQixNQUFNNEI7SUFFaENMLFFBQVFDLEtBQUssQ0FBQ0ssTUFBTTtJQUVwQixTQUFTRCxTQUFTRSxJQUFJO1FBQ3BCLElBQU1DLFlBQVlELEtBQUtFLFFBQVEsQ0FBQ1o7UUFFaEMsT0FBUVc7WUFDTixLQUFLNUI7Z0JBQWM7b0JBQ2pCLElBQU04QixhQUFhO29CQUVuQixJQUFJakIsUUFBUWlCLFlBQVk7d0JBQ3RCakI7d0JBRUFDLGVBQWVILGFBQWEsQ0FBQ0UsTUFBTTt3QkFFbkNFLGtCQUFrQkQ7b0JBQ3BCO29CQUVBO2dCQUNGO1lBRUEsS0FBS1o7Z0JBQWdCO29CQUNuQixJQUFNNkIsWUFBWWIsc0JBQXNCO29CQUV4QyxJQUFJTCxRQUFRa0IsV0FBVzt3QkFDckJsQjt3QkFFQUMsZUFBZUgsYUFBYSxDQUFDRSxNQUFNO3dCQUVuQ0Usa0JBQWtCRDtvQkFDcEI7b0JBRUE7Z0JBQ0Y7WUFFQSxLQUFLWDtnQkFBa0I7b0JBQ3JCVyxlQUFlO29CQUVma0IsUUFBUUMsR0FBRyxDQUFDM0I7b0JBRVpjLFFBQVFDLEtBQUssQ0FBQ2EsY0FBYyxDQUFDckMsTUFBTTRCO29CQUVuQ0wsUUFBUUMsS0FBSyxDQUFDYyxLQUFLO29CQUVuQnZCLFNBQVNFO29CQUVUO2dCQUNGO1lBRUEsS0FBS1Q7WUFDTCxLQUFLQztnQkFBMkI7b0JBQzlCYyxRQUFRZ0IsTUFBTSxDQUFDQyxTQUFTO29CQUV4QmpCLFFBQVFnQixNQUFNLENBQUNFLFFBQVEsQ0FBQztvQkFFeEJsQixRQUFRQyxLQUFLLENBQUNhLGNBQWMsQ0FBQ3JDLE1BQU00QjtvQkFFbkNMLFFBQVFDLEtBQUssQ0FBQ2MsS0FBSztvQkFFbkJ2QixTQUFTRTtvQkFFVDtnQkFDRjtZQUVBLEtBQUtiO2dCQUFlO29CQUNsQitCLFFBQVFDLEdBQUcsQ0FBQzdCO29CQUVaZ0IsUUFBUW1CLElBQUk7b0JBRVo7Z0JBQ0Y7WUFFQTtnQkFBUztvQkFHUDtnQkFDRjtRQUNGO0lBQ0Y7QUFDRjtBQUVBLFNBQVN4QixrQkFBa0JELFlBQVk7SUFDckMsSUFBTTBCLGNBQWMxQywyQ0FDZDJDLHFCQUFxQjNCLGFBQWE0QixRQUFRO0lBRWhEdEIsUUFBUWdCLE1BQU0sQ0FBQ0MsU0FBUztJQUV4QmpCLFFBQVFnQixNQUFNLENBQUNFLFFBQVEsQ0FBQztJQUV4QmxCLFFBQVFnQixNQUFNLENBQUNPLEtBQUssQ0FBQ0g7SUFFckJwQixRQUFRZ0IsTUFBTSxDQUFDTyxLQUFLLENBQUNGO0FBQ3ZCIn0=