"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _necessary = require("necessary");
var _glob = /*#__PURE__*/ _interop_require_default(require("./rule/glob"));
var _regex = /*#__PURE__*/ _interop_require_default(require("./rule/regex"));
var _string = /*#__PURE__*/ _interop_require_default(require("./rule/string"));
var _constants = require("./constants");
var _version_1_7 = require("./configuration/version_1_7");
var _version_1_1 = require("./configuration/version_1_1");
var _version_1_2 = require("./configuration/version_1_2");
var _version_1_3 = require("./configuration/version_1_3");
var _version_1_4 = require("./configuration/version_1_4");
var _messages = require("./messages");
var _versions = require("./versions");
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
var rc = _necessary.configurationUtilities.rc, migrate = _necessary.versionUtilities.migrate, setRCBaseExtension = rc.setRCBaseExtension, checkRCFileExists = rc.checkRCFileExists, updateRCFile = rc.updateRCFile, writeRCFile = rc.writeRCFile, readRCFile = rc.readRCFile;
setRCBaseExtension(_constants.FIND);
function retrieveRootDirectoryPaths() {
    var configuration = readConfigurationFile(), rootDirectoryPaths = configuration.rootDirectoryPaths;
    return rootDirectoryPaths;
}
function retrievePreviousRules() {
    var configuration = readConfigurationFile();
    var previousRules = configuration.previousRules;
    var previousRulesJSON = previousRules; ///
    previousRules = rulesFromPathRulesJSON(previousRulesJSON);
    return previousRules;
}
function retrieveIgnoredFilePathRules() {
    var configuration = readConfigurationFile();
    var ignoredFilePathRules = configuration.ignoredFilePathRules;
    var ignoredFilePathRulesJSON = ignoredFilePathRules; ///
    ignoredFilePathRules = rulesFromPathRulesJSON(ignoredFilePathRulesJSON);
    return ignoredFilePathRules;
}
function retrievePermittedFilePathRules() {
    var configuration = readConfigurationFile();
    var permittedFilePathRules = configuration.permittedFilePathRules;
    var permittedFilePathRulesJSON = permittedFilePathRules; ///
    permittedFilePathRules = rulesFromPathRulesJSON(permittedFilePathRulesJSON);
    return permittedFilePathRules;
}
function retrieveIgnoredDirectoryPathRules() {
    var configuration = readConfigurationFile();
    var ignoredDirectoryPathRules = configuration.ignoredDirectoryPathRules;
    var ignoredDirectoryPathRulesJSON = ignoredDirectoryPathRules; ///
    ignoredDirectoryPathRules = rulesFromPathRulesJSON(ignoredDirectoryPathRulesJSON);
    return ignoredDirectoryPathRules;
}
function retrievePermittedDirectoryPathRules() {
    var configuration = readConfigurationFile();
    var permittedDirectoryPathRules = configuration.permittedDirectoryPathRules;
    var permittedDirectoryPathRulesJSON = permittedDirectoryPathRules; ///
    permittedDirectoryPathRules = rulesFromPathRulesJSON(permittedDirectoryPathRulesJSON);
    return permittedDirectoryPathRules;
}
function updateRootDirectoryPaths(rootDirectoryPaths) {
    updateConfigurationFile({
        rootDirectoryPaths: rootDirectoryPaths
    });
}
function updatePreviousRules(previousRules) {
    var previousRulesJSON = rulesJSONFromRules(previousRules);
    previousRules = previousRulesJSON; ///
    updateConfigurationFile({
        previousRules: previousRules
    });
}
function updateIgnoredFilePathRules(ignoredFilePathRules) {
    var ignoredFilePathRulesJSON = rulesJSONFromRules(ignoredFilePathRules);
    ignoredFilePathRules = ignoredFilePathRulesJSON; ///
    updateConfigurationFile({
        ignoredFilePathRules: ignoredFilePathRules
    });
}
function updatePermittedFilePathRules(permittedFilePathRules) {
    var permittedFilePathRulesJSON = rulesJSONFromRules(permittedFilePathRules);
    permittedFilePathRules = permittedFilePathRulesJSON; ///
    updateConfigurationFile({
        permittedFilePathRules: permittedFilePathRules
    });
}
function updateIgnoredDirectoryPathRules(ignoredDirectoryPathRules) {
    var ignoredDirectoryPathRulesJSON = rulesJSONFromRules(ignoredDirectoryPathRules);
    ignoredDirectoryPathRules = ignoredDirectoryPathRulesJSON; ///
    updateConfigurationFile({
        ignoredDirectoryPathRules: ignoredDirectoryPathRules
    });
}
function updatePermittedDirectoryPathRules(permittedDirectoryPathRules) {
    var permittedDirectoryPathRulesJSON = rulesJSONFromRules(permittedDirectoryPathRules);
    permittedDirectoryPathRules = permittedDirectoryPathRulesJSON; ///
    updateConfigurationFile({
        permittedDirectoryPathRules: permittedDirectoryPathRules
    });
}
function createConfigurationFile() {
    var configuration = (0, _version_1_7.createConfiguration)(), json = configuration; ///
    writeRCFile(json);
}
function migrateConfigurationFile() {
    assertConfigurationFileExists();
    var json = readRCFile();
    var _obj;
    var migrationMap = (_obj = {}, _define_property(_obj, _versions.VERSION_1_0, _version_1_1.migrateConfigurationToVersion_1_1), _define_property(_obj, _versions.VERSION_1_1, _version_1_2.migrateConfigurationToVersion_1_2), _define_property(_obj, _versions.VERSION_1_2, _version_1_3.migrateConfigurationToVersion_1_3), _define_property(_obj, _versions.VERSION_1_3, _version_1_4.migrateConfigurationToVersion_1_4), _define_property(_obj, _versions.VERSION_1_4, _version_1_7.migrateConfigurationToVersion_1_7), _obj), latestVersion = _versions.VERSION_1_7;
    json = migrate(json, migrationMap, latestVersion);
    writeRCFile(json);
}
function checkConfigurationFileExists() {
    var rcFileExists = checkRCFileExists(), configurationFileExists = rcFileExists; ///
    return configurationFileExists;
}
function assertConfigurationFileExists() {
    var configurationFileExists = checkConfigurationFileExists();
    if (!configurationFileExists) {
        console.log(_messages.CONFIGURATION_FILE_DOES_NOT_EXIST_MESSAGE);
        process.exit(1);
    }
}
module.exports = {
    retrieveRootDirectoryPaths: retrieveRootDirectoryPaths,
    retrievePreviousRules: retrievePreviousRules,
    retrieveIgnoredFilePathRules: retrieveIgnoredFilePathRules,
    retrievePermittedFilePathRules: retrievePermittedFilePathRules,
    retrieveIgnoredDirectoryPathRules: retrieveIgnoredDirectoryPathRules,
    retrievePermittedDirectoryPathRules: retrievePermittedDirectoryPathRules,
    updatePreviousRules: updatePreviousRules,
    updateRootDirectoryPaths: updateRootDirectoryPaths,
    updateIgnoredFilePathRules: updateIgnoredFilePathRules,
    updatePermittedFilePathRules: updatePermittedFilePathRules,
    updateIgnoredDirectoryPathRules: updateIgnoredDirectoryPathRules,
    updatePermittedDirectoryPathRules: updatePermittedDirectoryPathRules,
    createConfigurationFile: createConfigurationFile,
    migrateConfigurationFile: migrateConfigurationFile,
    checkConfigurationFileExists: checkConfigurationFileExists
};
function readConfigurationFile() {
    assertConfigurationFileExists();
    var json = readRCFile(), configuration = json; ///
    return configuration;
}
function writeConfigurationFile(configuration) {
    assertConfigurationFileExists();
    var json = configuration; ///
    writeRCFile(json);
}
function updateConfigurationFile(addedConfiguration) {
    for(var _len = arguments.length, deleteConfigurationNames = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
        deleteConfigurationNames[_key - 1] = arguments[_key];
    }
    assertConfigurationFileExists();
    var addedProperties = addedConfiguration, deletedPropertyNames = deleteConfigurationNames; ///
    updateRCFile.apply(void 0, [
        addedProperties
    ].concat(_to_consumable_array(deletedPropertyNames)));
}
function rulesFromPathRulesJSON(rulesJSON) {
    var rules = rulesJSON.map(function(ruleJSON) {
        var json = ruleJSON, rule = _glob.default.fromJSON(json) || _regex.default.fromJSON(json) || _string.default.fromJSON(json);
        return rule;
    });
    return rules;
}
function rulesJSONFromRules(rules) {
    var rulesJSON = rules.map(function(rule) {
        var ruleJSON = rule.toJSON();
        return ruleJSON;
    });
    return rulesJSON;
}

//# sourceMappingURL=data:application/json;base64,