"use strict";
import findAction from "./action/find";
import helpAction from "./action/help";
import versionAction from "./action/version";
import initialiseAction from "./action/initialise";
import addRootDirectoryPathAction from "./action/addRootDirectoryPath";
import listRootDirectoryPathsAction from "./action/listRootDirectoryPaths";
import removeRootDirectoryPathAction from "./action/removeRootDirectoryPath";
import { NO_ARGUMENT_GIVEN_MESSAGE, COMMAND_NOT_RECOGNISED_MESSAGE } from "./messages";
import { DEFAULT_REGEX, DEFAULT_STRING, DEFAULT_FORMAT, DEFAULT_DRY_RUN, DEFAULT_QUIETLY, DEFAULT_PREVIOUS, DEFAULT_INTERACTIVE } from "./defaults";
import { FIND_COMMAND, HELP_COMMAND, VERSION_COMMAND, INITIALISE_COMMAND, ADD_ROOT_DIRECTORY_PATH_COMMAND, LIST_ROOT_DIRECTORY_PATHS_COMMAND, REMOVE_ROOT_DIRECTORY_PATH_COMMAND } from "./commands";
export default function main(command, argument, options) {
    var _options_format = options.format, format = _options_format === void 0 ? DEFAULT_FORMAT : _options_format, _options_dryRun = options.dryRun, dryRun = _options_dryRun === void 0 ? DEFAULT_DRY_RUN : _options_dryRun, _options_quietly = options.quietly, quietly = _options_quietly === void 0 ? DEFAULT_QUIETLY : _options_quietly, _options_previous = options.previous, previous = _options_previous === void 0 ? DEFAULT_PREVIOUS : _options_previous, _options_interactive = options.interactive, interactive = _options_interactive === void 0 ? DEFAULT_INTERACTIVE : _options_interactive;
    var _options_regex = options.regex, regex = _options_regex === void 0 ? DEFAULT_REGEX : _options_regex, _options_string = options.string, string = _options_string === void 0 ? DEFAULT_STRING : _options_string;
    switch(command){
        case HELP_COMMAND:
            {
                helpAction();
                break;
            }
        case VERSION_COMMAND:
            {
                versionAction();
                break;
            }
        case INITIALISE_COMMAND:
            {
                initialiseAction();
                break;
            }
        case ADD_ROOT_DIRECTORY_PATH_COMMAND:
            {
                var rootDirectoryPath = argument; ///
                addRootDirectoryPathAction(rootDirectoryPath);
                break;
            }
        case LIST_ROOT_DIRECTORY_PATHS_COMMAND:
            {
                listRootDirectoryPathsAction();
                break;
            }
        case REMOVE_ROOT_DIRECTORY_PATH_COMMAND:
            {
                var rootDirectoryPath1 = argument; ///
                removeRootDirectoryPathAction(rootDirectoryPath1);
                break;
            }
        case FIND_COMMAND:
            {
                if (argument === null) {
                    if (!dryRun && !previous && !interactive) {
                        console.log(NO_ARGUMENT_GIVEN_MESSAGE);
                        break;
                    }
                }
                if (false) {
                ///
                } else if (string) {
                    argument = '"'.concat(argument, '"');
                } else if (regex) {
                    argument = "/".concat(argument, "/");
                }
                string = argument; ///
                findAction(string, dryRun, format, quietly, previous, interactive);
                break;
            }
        default:
            {
                console.log(COMMAND_NOT_RECOGNISED_MESSAGE);
                break;
            }
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgZmluZEFjdGlvbiBmcm9tIFwiLi9hY3Rpb24vZmluZFwiO1xuaW1wb3J0IGhlbHBBY3Rpb24gZnJvbSBcIi4vYWN0aW9uL2hlbHBcIjtcbmltcG9ydCB2ZXJzaW9uQWN0aW9uIGZyb20gXCIuL2FjdGlvbi92ZXJzaW9uXCI7XG5pbXBvcnQgaW5pdGlhbGlzZUFjdGlvbiBmcm9tIFwiLi9hY3Rpb24vaW5pdGlhbGlzZVwiO1xuaW1wb3J0IGFkZFJvb3REaXJlY3RvcnlQYXRoQWN0aW9uIGZyb20gXCIuL2FjdGlvbi9hZGRSb290RGlyZWN0b3J5UGF0aFwiO1xuaW1wb3J0IGxpc3RSb290RGlyZWN0b3J5UGF0aHNBY3Rpb24gZnJvbSBcIi4vYWN0aW9uL2xpc3RSb290RGlyZWN0b3J5UGF0aHNcIjtcbmltcG9ydCByZW1vdmVSb290RGlyZWN0b3J5UGF0aEFjdGlvbiBmcm9tIFwiLi9hY3Rpb24vcmVtb3ZlUm9vdERpcmVjdG9yeVBhdGhcIjtcblxuaW1wb3J0IHsgTk9fQVJHVU1FTlRfR0lWRU5fTUVTU0FHRSwgQ09NTUFORF9OT1RfUkVDT0dOSVNFRF9NRVNTQUdFIH0gZnJvbSBcIi4vbWVzc2FnZXNcIjtcbmltcG9ydCB7IERFRkFVTFRfUkVHRVgsIERFRkFVTFRfU1RSSU5HLCBERUZBVUxUX0ZPUk1BVCwgREVGQVVMVF9EUllfUlVOLCBERUZBVUxUX1FVSUVUTFksIERFRkFVTFRfUFJFVklPVVMsIERFRkFVTFRfSU5URVJBQ1RJVkUgfSBmcm9tIFwiLi9kZWZhdWx0c1wiO1xuaW1wb3J0IHsgRklORF9DT01NQU5ELFxuICAgICAgICAgSEVMUF9DT01NQU5ELFxuICAgICAgICAgVkVSU0lPTl9DT01NQU5ELFxuICAgICAgICAgSU5JVElBTElTRV9DT01NQU5ELFxuICAgICAgICAgQUREX1JPT1RfRElSRUNUT1JZX1BBVEhfQ09NTUFORCxcbiAgICAgICAgIExJU1RfUk9PVF9ESVJFQ1RPUllfUEFUSFNfQ09NTUFORCxcbiAgICAgICAgIFJFTU9WRV9ST09UX0RJUkVDVE9SWV9QQVRIX0NPTU1BTkQgfSBmcm9tIFwiLi9jb21tYW5kc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYWluKGNvbW1hbmQsIGFyZ3VtZW50LCBvcHRpb25zKSB7XG4gIGNvbnN0IHsgZm9ybWF0ID0gREVGQVVMVF9GT1JNQVQsIGRyeVJ1biA9IERFRkFVTFRfRFJZX1JVTiwgcXVpZXRseSA9IERFRkFVTFRfUVVJRVRMWSwgcHJldmlvdXMgPSBERUZBVUxUX1BSRVZJT1VTLCBpbnRlcmFjdGl2ZSA9IERFRkFVTFRfSU5URVJBQ1RJVkUgfSA9IG9wdGlvbnM7XG5cbiAgbGV0IHsgcmVnZXggPSBERUZBVUxUX1JFR0VYLCBzdHJpbmcgPSBERUZBVUxUX1NUUklORyB9ID0gb3B0aW9ucztcblxuICBzd2l0Y2ggKGNvbW1hbmQpIHtcbiAgICBjYXNlIEhFTFBfQ09NTUFORDoge1xuICAgICAgaGVscEFjdGlvbigpO1xuXG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjYXNlIFZFUlNJT05fQ09NTUFORDoge1xuICAgICAgdmVyc2lvbkFjdGlvbigpO1xuXG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjYXNlIElOSVRJQUxJU0VfQ09NTUFORDoge1xuICAgICAgaW5pdGlhbGlzZUFjdGlvbigpO1xuXG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjYXNlIEFERF9ST09UX0RJUkVDVE9SWV9QQVRIX0NPTU1BTkQ6IHtcbiAgICAgIGNvbnN0IHJvb3REaXJlY3RvcnlQYXRoID0gYXJndW1lbnQ7IC8vL1xuXG4gICAgICBhZGRSb290RGlyZWN0b3J5UGF0aEFjdGlvbihyb290RGlyZWN0b3J5UGF0aCk7XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNhc2UgTElTVF9ST09UX0RJUkVDVE9SWV9QQVRIU19DT01NQU5EOiB7XG4gICAgICBsaXN0Um9vdERpcmVjdG9yeVBhdGhzQWN0aW9uKCk7XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNhc2UgUkVNT1ZFX1JPT1RfRElSRUNUT1JZX1BBVEhfQ09NTUFORDoge1xuICAgICAgY29uc3Qgcm9vdERpcmVjdG9yeVBhdGggPSBhcmd1bWVudDsgLy8vXG5cbiAgICAgIHJlbW92ZVJvb3REaXJlY3RvcnlQYXRoQWN0aW9uKHJvb3REaXJlY3RvcnlQYXRoKTtcblxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY2FzZSBGSU5EX0NPTU1BTkQ6IHtcbiAgICAgIGlmIChhcmd1bWVudCA9PT0gbnVsbCkge1xuICAgICAgICBpZiAoIWRyeVJ1biAmJiAhcHJldmlvdXMgJiYgIWludGVyYWN0aXZlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coTk9fQVJHVU1FTlRfR0lWRU5fTUVTU0FHRSk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmFsc2UpIHtcbiAgICAgICAgLy8vXG4gICAgICB9IGVsc2UgaWYgKHN0cmluZykge1xuICAgICAgICBhcmd1bWVudCA9IGBcIiR7YXJndW1lbnR9XCJgO1xuICAgICAgfSBlbHNlIGlmIChyZWdleCkge1xuICAgICAgICBhcmd1bWVudCA9IGAvJHthcmd1bWVudH0vYDtcbiAgICAgIH1cblxuICAgICAgc3RyaW5nID0gYXJndW1lbnQ7ICAvLy9cblxuICAgICAgZmluZEFjdGlvbihzdHJpbmcsIGRyeVJ1biwgZm9ybWF0LCBxdWlldGx5LCBwcmV2aW91cywgaW50ZXJhY3RpdmUpO1xuXG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBkZWZhdWx0OiB7XG4gICAgICBjb25zb2xlLmxvZyhDT01NQU5EX05PVF9SRUNPR05JU0VEX01FU1NBR0UpO1xuXG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJmaW5kQWN0aW9uIiwiaGVscEFjdGlvbiIsInZlcnNpb25BY3Rpb24iLCJpbml0aWFsaXNlQWN0aW9uIiwiYWRkUm9vdERpcmVjdG9yeVBhdGhBY3Rpb24iLCJsaXN0Um9vdERpcmVjdG9yeVBhdGhzQWN0aW9uIiwicmVtb3ZlUm9vdERpcmVjdG9yeVBhdGhBY3Rpb24iLCJOT19BUkdVTUVOVF9HSVZFTl9NRVNTQUdFIiwiQ09NTUFORF9OT1RfUkVDT0dOSVNFRF9NRVNTQUdFIiwiREVGQVVMVF9SRUdFWCIsIkRFRkFVTFRfU1RSSU5HIiwiREVGQVVMVF9GT1JNQVQiLCJERUZBVUxUX0RSWV9SVU4iLCJERUZBVUxUX1FVSUVUTFkiLCJERUZBVUxUX1BSRVZJT1VTIiwiREVGQVVMVF9JTlRFUkFDVElWRSIsIkZJTkRfQ09NTUFORCIsIkhFTFBfQ09NTUFORCIsIlZFUlNJT05fQ09NTUFORCIsIklOSVRJQUxJU0VfQ09NTUFORCIsIkFERF9ST09UX0RJUkVDVE9SWV9QQVRIX0NPTU1BTkQiLCJMSVNUX1JPT1RfRElSRUNUT1JZX1BBVEhTX0NPTU1BTkQiLCJSRU1PVkVfUk9PVF9ESVJFQ1RPUllfUEFUSF9DT01NQU5EIiwibWFpbiIsImNvbW1hbmQiLCJhcmd1bWVudCIsIm9wdGlvbnMiLCJmb3JtYXQiLCJkcnlSdW4iLCJxdWlldGx5IiwicHJldmlvdXMiLCJpbnRlcmFjdGl2ZSIsInJlZ2V4Iiwic3RyaW5nIiwicm9vdERpcmVjdG9yeVBhdGgiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE9BQU9BLGdCQUFnQixnQkFBZ0I7QUFDdkMsT0FBT0MsZ0JBQWdCLGdCQUFnQjtBQUN2QyxPQUFPQyxtQkFBbUIsbUJBQW1CO0FBQzdDLE9BQU9DLHNCQUFzQixzQkFBc0I7QUFDbkQsT0FBT0MsZ0NBQWdDLGdDQUFnQztBQUN2RSxPQUFPQyxrQ0FBa0Msa0NBQWtDO0FBQzNFLE9BQU9DLG1DQUFtQyxtQ0FBbUM7QUFFN0UsU0FBU0MseUJBQXlCLEVBQUVDLDhCQUE4QixRQUFRLGFBQWE7QUFDdkYsU0FBU0MsYUFBYSxFQUFFQyxjQUFjLEVBQUVDLGNBQWMsRUFBRUMsZUFBZSxFQUFFQyxlQUFlLEVBQUVDLGdCQUFnQixFQUFFQyxtQkFBbUIsUUFBUSxhQUFhO0FBQ3BKLFNBQVNDLFlBQVksRUFDWkMsWUFBWSxFQUNaQyxlQUFlLEVBQ2ZDLGtCQUFrQixFQUNsQkMsK0JBQStCLEVBQy9CQyxpQ0FBaUMsRUFDakNDLGtDQUFrQyxRQUFRLGFBQWE7QUFFaEUsZUFBZSxTQUFTQyxLQUFLQyxPQUFPLEVBQUVDLFFBQVEsRUFBRUMsT0FBTztJQUNyRCxzQkFBeUpBLFFBQWpKQyxRQUFBQSxzQ0FBU2hCLG9EQUF3SWUsUUFBeEhFLFFBQUFBLHNDQUFTaEIsc0RBQStHYyxRQUE5RkcsU0FBQUEsd0NBQVVoQix3REFBb0ZhLFFBQW5FSSxVQUFBQSwwQ0FBV2hCLDZEQUF3RFksUUFBdENLLGFBQUFBLGdEQUFjaEI7SUFFakkscUJBQXlEVyxRQUFuRE0sT0FBQUEsb0NBQVF2QixrREFBMkNpQixRQUE1Qk8sUUFBQUEsc0NBQVN2QjtJQUV0QyxPQUFRYztRQUNOLEtBQUtQO1lBQWM7Z0JBQ2pCaEI7Z0JBRUE7WUFDRjtRQUVBLEtBQUtpQjtZQUFpQjtnQkFDcEJoQjtnQkFFQTtZQUNGO1FBRUEsS0FBS2lCO1lBQW9CO2dCQUN2QmhCO2dCQUVBO1lBQ0Y7UUFFQSxLQUFLaUI7WUFBaUM7Z0JBQ3BDLElBQU1jLG9CQUFvQlQsVUFBVSxHQUFHO2dCQUV2Q3JCLDJCQUEyQjhCO2dCQUUzQjtZQUNGO1FBRUEsS0FBS2I7WUFBbUM7Z0JBQ3RDaEI7Z0JBRUE7WUFDRjtRQUVBLEtBQUtpQjtZQUFvQztnQkFDdkMsSUFBTVkscUJBQW9CVCxVQUFVLEdBQUc7Z0JBRXZDbkIsOEJBQThCNEI7Z0JBRTlCO1lBQ0Y7UUFFQSxLQUFLbEI7WUFBYztnQkFDakIsSUFBSVMsYUFBYSxNQUFNO29CQUNyQixJQUFJLENBQUNHLFVBQVUsQ0FBQ0UsWUFBWSxDQUFDQyxhQUFhO3dCQUN4Q0ksUUFBUUMsR0FBRyxDQUFDN0I7d0JBRVo7b0JBQ0Y7Z0JBQ0Y7Z0JBRUEsSUFBSSxPQUFPO2dCQUNULEdBQUc7Z0JBQ0wsT0FBTyxJQUFJMEIsUUFBUTtvQkFDakJSLFdBQVcsQUFBQyxJQUFZLE9BQVRBLFVBQVM7Z0JBQzFCLE9BQU8sSUFBSU8sT0FBTztvQkFDaEJQLFdBQVcsQUFBQyxJQUFZLE9BQVRBLFVBQVM7Z0JBQzFCO2dCQUVBUSxTQUFTUixVQUFXLEdBQUc7Z0JBRXZCekIsV0FBV2lDLFFBQVFMLFFBQVFELFFBQVFFLFNBQVNDLFVBQVVDO2dCQUV0RDtZQUNGO1FBRUE7WUFBUztnQkFDUEksUUFBUUMsR0FBRyxDQUFDNUI7Z0JBRVo7WUFDRjtJQUNGO0FBQ0YifQ==